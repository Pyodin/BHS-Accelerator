---
parameters:
  - name: terraform_action
    default: "apply"
  - name: serviceConnection
  - name: root_module_folder_relative_path
    default: "."
  - name: target_subscription_id

steps:
  - task: AzureCLI@2
    displayName: Terraform Plan for ${{ coalesce(parameters.terraform_action, 'Apply') }}
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      addSpnToEnvironment: true
      inlineScript: |
        set -e

        # Get settings from service connection
        ACCOUNT=$(az account show 2>/dev/null)
        CLIENT_ID=$(echo $ACCOUNT | jq -r '.user.name')
        OIDC_TOKEN=$idToken # requires addSpnToEnvironment: true
        SUBSCRIPTION_ID=$(echo $ACCOUNT | jq -r '.id')
        TENANT_ID=$(echo $ACCOUNT | jq -r '.tenantId')

        export ARM_TENANT_ID=$TENANT_ID
        export ARM_SUBSCRIPTION_ID="${{ parameters.target_subscription_id }}"
        export ARM_OIDC_TOKEN=$OIDC_TOKEN
        export ARM_USE_OIDC="true"
        export ARM_CLIENT_ID=$CLIENT_ID
        export ARM_USE_AZUREAD="true"

        # Run Terraform Plan
        TERRAFORM_ARGS=("-chdir=${{ parameters.root_module_folder_relative_path }}" "plan" "-out=tfplan" "-input=false")

        if [ "$TERRAFORM_ACTION" = "destroy" ]; then
          TERRAFORM_ARGS+=("-destroy")
        fi

        echo "Running: terraform ${TERRAFORM_ARGS[@]}"
        terraform "${TERRAFORM_ARGS[@]}"
        
        # Show the plan for review
        echo "=== Terraform Plan Output ==="
        terraform -chdir="${{ parameters.root_module_folder_relative_path }}" show tfplan

    env:
      TERRAFORM_ACTION: ${{ coalesce(parameters.terraform_action, 'apply') }}
